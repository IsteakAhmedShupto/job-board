var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { CookiesOptionsService } from './cookies-options.service';
import { safeJsonParse } from './utils';
var CookiesService = /** @class */ (function () {
    function CookiesService(cookiesOptions) {
        this.options = cookiesOptions.options;
    }
    CookiesService.prototype.put = function (key, value, options) {
        this.cookiesWriter()(key, value, options);
    };
    CookiesService.prototype.putObject = function (key, value, options) {
        this.put(key, JSON.stringify(value), options);
    };
    CookiesService.prototype.get = function (key) {
        return this.cookiesReader()[key];
    };
    CookiesService.prototype.getObject = function (key) {
        var value = this.get(key);
        return value ? safeJsonParse(value) : value;
    };
    CookiesService.prototype.getAll = function () {
        return this.cookiesReader();
    };
    CookiesService.prototype.remove = function (key, options) {
        this.cookiesWriter()(key, undefined, options);
    };
    CookiesService.prototype.removeAll = function () {
        var _this = this;
        var cookies = this.getAll();
        Object.keys(cookies).forEach(function (key) {
            _this.remove(key);
        });
    };
    CookiesService.prototype.cookiesReader = function () {
        return {};
    };
    CookiesService.prototype.cookiesWriter = function () {
        return function () { };
    };
    CookiesService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [CookiesOptionsService])
    ], CookiesService);
    return CookiesService;
}());
export { CookiesService };
//# sourceMappingURL=cookies.service.js.map